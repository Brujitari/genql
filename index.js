/**
 * Returns array of formatted fields from input model
 * model: Data Model Json
 * prefix: To append to all column names
 */
externals.getSelectFields = (model, prefix) => {
  let fields = [];
  prefix = prefix ? `${prefix}.` : '';
  for (let column of model.columns) {
    if (column.alternate) {
      fields.push(`COALESCE(NULLIF(${prefix}${column.name}, ''), ${column.alternate})`);
    } else {
      fields.push(`${prefix}${column.name}`);
    }
  }

  return fields;
};


/**
 * Returns fields from the input models
 * Uses join_key from model as prefix for column names
 */
externals.getJoinFields = (model, prefix) => {
  let fields = [];
  prefix = prefix ? `${prefix}.` : '';
  for (let column of model.columns) {
    if (column.alternate) {
      fields.push(`COALESCE(NULLIF(${prefix}${column.name},''), ${column.alternate}) as ${model.join_key}_${column.name}`);
    } else {
      fields.push(`${prefix}${column.name} as ${model.join_key}_${column.name}`);
    }
  }

  return fields;
};


/**
 * Returns fields array from input models
 * It returns only those columns which does not have a auto flag in the model
 * auto flag will be available for those columns, for which values will be generated by database
 * Like: Auto Increment id in MySQL
 */
externals.getInsertFields = (model, prefix) => {
  let fields = [];
  prefix = prefix ? `${prefix}.` : '';
  for (let column of model.columns) {
    if (!column.auto) {
      fields.push(`${prefix}${column.name}`);
    }
  }

  return fields;
};


/**
 * Returns list of columns from input model which has `private` flags attached to it
 */
externals.getPrivateFields = (model, prefix) => {
  let fields = [];
  prefix = prefix ? `${prefix}.` : '';
  for (let column of model.columns) {
    if (column.private) {
      fields.push(`${prefix}${column.name}`);
    }
  }

  return fields;
};


/**
 * Returns array of values which is used in insert queries based on the input model
 * It takes model and data json as input
 * values will be pulled from data json based on the model definition
 * It processes only non-auto fields
 */
externals.getQueryValues = (model, data) => {
  const values = [];
  for (let column of model.columns) {
    if (!column.auto) {
      const value = _.get(data, column.name) || column.defaultValue;
      values.push(value);
    }
  }

  return values;
};


/**
 * Returns array of values for UPDATE query.
 * This parses values from data json based on the fields
 * If any value is missing for a column it will use the default values
 */
externals.getUpdateValues = (model, fields, data) => {
  const values = [];
  for (let field of fields) {
    let fieldData = _.get(data, field);
    if (fieldData) {
      if (isObject(fieldData)) {
        values.push(JSON.stringify(fieldData));
      } else {
        values.push(fieldData);
      }
    } else {
      fieldData = externals.getDefaultValue(model, field);
      values.push(fieldData);
    }
  }

  return values;
};


/**
 * Returns column default value
 * If there is no default value it returns null
 */
externals.getDefaultValue = (model, field) => {
  for (let column of model.columns) {
    if (column.name === field) {
      return column.defaultValue;
    }
  }

  return null;
};



module.exports = externals;